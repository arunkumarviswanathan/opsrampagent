---
- hosts: "{{ hostlist | default('all') }}"
  gather_facts: yes
  vars:
    typeOfExecution: "{{ executionType  | default('install') | lower }}"
    removeandinstall: "{{ reinstall | default('no') | lower }}"
    agentType: "{{ isnonroot | default('no') | lower }}"
    customUser: "{{ agentuser | default('') }}"
    internal_cmd: ""
  tasks:
  - name: 
    include_vars:
      file: roles/common/vars/agentconfig.yml
      name: config
    run_once: true
  - name:
    block:
    - name:
      set_fact: 
        agent_cmd: " -K {{ config['api_key'] }} -S {{ config['api_secret'] }} -s {{ config['api_server'] }} -c {{ config['client_id'] }} -f {{ config['features'] }}"
      delegate_to: 127.0.0.1
      run_once: true
      when: config['connectionType'] != "proxy"
    - name:
      set_fact:
        agent_cmd: " -K {{ config['api_key'] }} -S {{ config['api_secret'] }} -s {{ config['api_server'] }} -c {{ config['client_id'] }} -m {{ config['connectionType'] }} -x {{ config['proxy_server'] }} -p {{ config['proxy_port'] }} -t {{ config['proxy_proto'] }} -f {{ config['features'] }}"
      delegate_to: 127.0.0.1
      run_once: true
      when: config['connectionType'] == "proxy"
    - name:
      set_fact:
        agent_cmd: " -K {{ config['api_key'] }} -S {{ config['api_secret'] }} -s {{ config['api_server'] }} -c {{ config['client_id'] }} -m {{ config['connectionType'] }} -x {{ config['proxy_server'] }} -p {{ config['proxy_port'] }} -t {{ config['proxy_proto'] }} -U {{ config['proxy_user'] }} -P {{ config['proxy_passwd'] }} -f {{ config['features'] }}"
      delegate_to: 127.0.0.1
      run_once: true
      when: config['connectionType'] == "proxy" and config['proxy_user'] != "PROXY_USERNAME" and config['proxy_passwd'] != "PROXY_PASSWORD"
    - name:
      set_fact:
        internal_cmd: "echo {{ ansible_password }} | sudo -S "
      ignore_errors: yes
      no_log: True
      when: ansible_user != "root"
    - name: Getting system python path
      shell: if [ "$(command -v python)" != '' ];then command -v python; elif [ "$(command -v python2)" != '' ];then command -v python2; else command -v python3; fi
      register: pythonpath
      delegate_to: 127.0.0.1
      run_once: true
      ignore_errors: yes
    - name: Checking/downloading latest agent packages
      shell: "{{ pythonpath.stdout }} roles/common/files/downloadpackages.py {{ agent_cmd }}"
      delegate_to: 127.0.0.1
      run_once: true
    - name:
      include_vars:
        file: roles/common/vars/agentversion.yml
        name: version
      run_once: true
    - name:
      include_tasks: roles/agent-install-uninstall/install/tasks/deployagent.yml
      when: version['agentVersion'] != "none"
    when: typeOfExecution == "install"
  - name:
    include_tasks: "roles/agent-install-uninstall/uninstall/tasks/{{ (ansible_facts['os_family'] | lower) }}.yml"
    when: typeOfExecution == "uninstall"
